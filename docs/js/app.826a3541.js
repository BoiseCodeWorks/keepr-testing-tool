(function(e){function t(t){for(var a,r,i=t[0],l=t[1],c=t[2],p=0,d=[];p<i.length;p++)r=i[p],o[r]&&d.push(o[r][0]),o[r]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);u&&u(t);while(d.length)d.shift()();return n.push.apply(n,c||[]),s()}function s(){for(var e,t=0;t<n.length;t++){for(var s=n[t],a=!0,i=1;i<s.length;i++){var l=s[i];0!==o[l]&&(a=!1)}a&&(n.splice(t--,1),e=r(r.s=s[0]))}return e}var a={},o={app:0},n=[];function r(t){if(a[t])return a[t].exports;var s=a[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=a,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(s,a,function(t){return e[t]}.bind(null,a));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/keepr-testing-tool/";var i=window["webpackJsonp"]=window["webpackJsonp"]||[],l=i.push.bind(i);i.push=t,i=i.slice();for(var c=0;c<i.length;c++)t(i[c]);var u=l;n.push([0,"chunk-vendors"]),s()})({0:function(e,t,s){e.exports=s("56d7")},"034f":function(e,t,s){"use strict";var a=s("64a9"),o=s.n(a);o.a},"56d7":function(e,t,s){"use strict";s.r(t);var a=s("2b0e"),o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{attrs:{id:"app"}},[s("div",{attrs:{id:"nav"}}),s("router-view")],1)},n=[],r=(s("034f"),s("2877")),i={},l=Object(r["a"])(i,o,n,!1,null,null,null),c=l.exports,u=s("8c4f"),p=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"home container-fluid"},[s("div",{staticClass:"row"},[s("div",{staticClass:"col-12 mb-3"},[s("h1",[e._v("Keepr Testing Tool")]),s("button",{staticClass:"clickable btn btn-danger my-2 mx-1",on:{click:function(t){e.readMe=!e.readMe}}},[e._v("Read Me")]),e.readMe?s("div",{staticClass:"card border-warning"},[s("div",{staticClass:"card-body readMeSection text-left"},[s("h3",[s("span",{on:{click:e.openTests}},[e._v("Welcome")]),e._v(" to the Keepr Testing Tool. ")]),s("p"),e._v("This tool is designed to test very specific routes in your application's backend. "),s("strong",[e._v("If your\n            routes are different these tests will not work.")]),s("p"),e._v(" Each test will tell you what pathway it is testing, what data (if any) should be sent to your API,\n          and what the response should be from your database. Once the test passes, it will turn green, and the next\n          test will be called. Each section of tests will correspond to a controller in your backend. It is designed\n          so that you can test one controller at a time"),s("p"),s("p",[e._v("Please read the following directions before beginning your tests:")]),e._m(0),s("div",{staticClass:"card-footer text-center"},[s("button",{staticClass:"btn btn-info mx-2",on:{click:function(t){e.readMe=!1}}},[e._v("Close")])])])]):e._e(),s("button",{staticClass:"btn btn-danger my-2",on:{click:function(t){e.seeUrl=!e.seeUrl}}},[e._v("View Base URLs")]),e.seeUrl?s("div",{staticClass:"card urls border-warning"},[s("div",{staticClass:"card-body"},[s("p",[e._v("Auth Base URL: http://localhost:5000/account")]),s("p",[e._v("All Other Tests Base URL: http://localhost:5000/api")]),s("button",{staticClass:"btn btn-info",on:{click:function(t){e.seeUrl=!1}}},[e._v("Close")])])]):e._e()])]),e.actuallyReadDirections?s("div",{staticClass:"row"},[s("div",{staticClass:"col-6 offset-lg-3"},[e.user.email?e._e():s("div",[e.newAccount?s("form",{on:{submit:function(t){return t.preventDefault(),e.register(t)}}},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.newUser.username,expression:"newUser.username"}],staticClass:"form-control",attrs:{type:"text",placeholder:"name"},domProps:{value:e.newUser.username},on:{input:function(t){t.target.composing||e.$set(e.newUser,"username",t.target.value)}}}),s("input",{directives:[{name:"model",rawName:"v-model",value:e.newUser.email,expression:"newUser.email"}],staticClass:"form-control",attrs:{type:"email",placeholder:"email"},domProps:{value:e.newUser.email},on:{input:function(t){t.target.composing||e.$set(e.newUser,"email",t.target.value)}}}),s("input",{directives:[{name:"model",rawName:"v-model",value:e.newUser.password,expression:"newUser.password"}],staticClass:"form-control",attrs:{type:"password",placeholder:"password"},domProps:{value:e.newUser.password},on:{input:function(t){t.target.composing||e.$set(e.newUser,"password",t.target.value)}}}),s("button",{staticClass:"btn btn-info my-2",attrs:{type:"submit"}},[e._v("Create Account")])]):e._e(),e.newAccount?e._e():s("form",{on:{submit:function(t){return t.preventDefault(),e.login(t)}}},[s("input",{directives:[{name:"model",rawName:"v-model",value:e.newUser.email,expression:"newUser.email"}],staticClass:"form-control",attrs:{type:"email",placeholder:"email"},domProps:{value:e.newUser.email},on:{input:function(t){t.target.composing||e.$set(e.newUser,"email",t.target.value)}}}),s("input",{directives:[{name:"model",rawName:"v-model",value:e.newUser.password,expression:"newUser.password"}],staticClass:"form-control",attrs:{type:"password",placeholder:"password"},domProps:{value:e.newUser.password},on:{input:function(t){t.target.composing||e.$set(e.newUser,"password",t.target.value)}}}),s("button",{staticClass:"btn btn-info",attrs:{type:"submit"}},[e._v("Login")])]),s("a",{staticClass:"mx-2",on:{click:function(t){e.newAccount=!1}}},[e._v("Test an existing account")]),s("a",{staticClass:"mx-2",on:{click:function(t){e.newAccount=!0}}},[e._v("Create and test a new account\n        ")])])]),e.user.email?s("div",{staticClass:"col-6 offset-lg-3 my-3"},[s("h1",{staticClass:"mb-2 welcome"},[e._v("Welcome, "+e._s(e.user.username))]),s("button",{staticClass:"btn btn-info",on:{click:e.logout}},[e._v("Logout")])]):e._e()]):e._e(),e.actuallyReadDirections?s("div",{staticClass:"row"},[e._m(1),s("tests",{attrs:{tests:e.authTests}})],1):e._e(),e.actuallyReadDirections?s("div",{staticClass:"row"},[s("div",{staticClass:"col-12"},[s("h1",{staticClass:"mb-2"},[e._v(" Test Keep Controller")]),s("p",[e._v("All of the remaining tests use the following base URL: http://localhost:5000/api")]),s("button",{staticClass:"btn btn-info mb-2",on:{click:e.testKeeps}},[e._v("Run Tests")])]),s("tests",{attrs:{tests:e.keepTests}})],1):e._e(),e.actuallyReadDirections?s("div",{staticClass:"row"},[s("div",{staticClass:"col-12"},[s("h1",{staticClass:"mb-2"},[e._v("Test Vault Controller")]),s("button",{staticClass:"btn btn-info mb-2",on:{click:e.testVaults}},[e._v("Run Tests")])]),s("tests",{attrs:{tests:e.vaultTests}})],1):e._e(),e.actuallyReadDirections?s("div",{staticClass:"row"},[s("div",{staticClass:"col-12"},[s("h1",{staticClass:"mb-2"},[e._v("Test Vault Keep Controller")]),s("button",{staticClass:"btn btn-info mb-2",on:{click:e.testVaultKeeps}},[e._v("Run Tests")])]),s("tests",{attrs:{tests:e.vaultKeepTests}})],1):e._e()])},d=[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",{staticClass:"text-left"},[s("li",{staticClass:"my-2"},[s("strong",[e._v("OPEN YOUR INSPECTOR TOOLS")])]),s("li",{staticClass:"my-2"},[e._v("Create a user. When you create a user, it will test all of your auth routes.")]),s("li",{staticClass:"my-2"},[e._v('After you create your first user successfully, you will be able to use the "test an\n              existing account"\n              option')]),s("li",{staticClass:"my-2"},[e._v("Next, test your Keep controller. When you press 'run tests' it will create a waterfall\n              effect. Each\n              time\n              a\n              test is successful, it will invoke the next test. "),s("strong",[e._v("If a test fails, the next tests will not\n                run.")]),e._v(" This means that if you pass the first test and the remaining tests stay red, that does\n              not\n              mean that all of them are broken; it means that the next test in the line did not pass so the remaining\n              tests were not run.")]),s("li",[e._v('When you are ready to view the tests and begin testing, click on the word "Welcome" in the upper left\n              corner of this box and then be sure to scroll down.')]),s("li",{staticClass:"my-2"},[e._v("Be sure to read your error messages in the console if a test does not pass.")])])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"col-12"},[s("h1",[e._v("Auth Tests")]),s("p",[e._v("These tests use the following base URL: http://localhost:5000/account")])])}],h=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"keepTests col-6 offset-lg-3 my-4"},e._l(e.tests,function(t){return s("div",{staticClass:"card",class:[t.success?"border-success":"border-danger"]},[s("h4",[e._v(e._s(t.name))]),e._l(t.routeInfo,function(t,a){return s("p",[e._v(e._s(a.toUpperCase())+": "+e._s(t))])})],2)}),0)},m=[],v={name:"keepTests",props:["tests"],data(){return{}},computed:{},methods:{},components:{}},f=v,g=(s("867d"),Object(r["a"])(f,h,m,!1,null,null,null)),w=g.exports,b={mounted(){this.$store.dispatch("authenticate")},name:"home",data(){return{readMe:!0,seeUrl:!0,actuallyReadDirections:!1,newAccount:!0,newUser:{email:"",password:"",username:""},keepOne:{img:"https://course_report_production.s3.amazonaws.com/rich/rich_files/rich_files/2248/s300/cw-logo-square-black-outline.jpg",description:"Boise codeworks logo testing one",name:"testing one",isPrivate:!0},testVault:{name:"test vault",description:"for testing purposes"}}},computed:{user(){return this.$store.state.auth.user},keepTests(){return this.$store.state.keeps.tests},authTests(){return this.$store.state.auth.tests},vaultTests(){return this.$store.state.vaults.tests},vaultKeepTests(){return this.$store.state.vaultKeeps.tests}},methods:{register(){this.$store.dispatch("register",this.newUser)},login(){let e={email:this.newUser.email,password:this.newUser.password};this.$store.dispatch("login",e)},testKeeps(){this.$store.dispatch("createKeep",this.keepOne)},testVaults(){this.$store.dispatch("createVault",this.testVault)},testVaultKeeps(){this.$store.dispatch("getKeep")},logout(){this.$store.dispatch("logout"),this.$store.dispatch("removeUser")},openTests(){this.actuallyReadDirections=!0,this.readMe=!1}},components:{tests:w}},k=b,C=(s("cccb"),Object(r["a"])(k,p,d,!1,null,null,null)),K=C.exports;a["a"].use(u["a"]);var y=new u["a"]({routes:[{path:"/",name:"home",component:K}]}),_=s("2f62"),V=s("bc3a"),U=s.n(V);let I=U.a.create({baseURL:"http://localhost:5000/api",timeout:5e3,withCredentials:!0}),T=U.a.create({baseURL:"http://localhost:5000/account",timeout:5e3,withCredentials:!0}),x={};var S={api:I,auth:T,user:x},P={state:{tests:{canRegister:{success:!1,name:"Can Register A User",routeInfo:{path:"/register",data:"User object {email, password, username}",response:"User object",description:"Post request, allows users to register an account."}},canLogin:{success:!1,name:"Can  Login",routeInfo:{path:"/login",data:"Credentials {email, password}",response:"User object",description:"Post request. Allows users to login"}},canLogout:{success:!1,name:"Can Logout",routeInfo:{path:"/logout",description:"Delete request. Allows users to logout."}},canA:{success:!1,name:"Can Authenticate",routeInfo:{path:"/authenticate",response:"User object, if successful",description:"Get request. Authenticates current user."}}},user:{}},mutations:{setAuthState(e,t){console.log(e.tests[t]),e.tests[t].success=!0},setUser(e,t){e.user=t}},actions:{register({commit:e,dispatch:t},s){S.auth.post("register",s).then(a=>{e("setUser",s),e("setAuthState","canRegister"),t("logout")}).catch(e=>{console.error(e)})},logout({commit:e,dispatch:t}){S.auth.delete("logout").then(s=>{e("setAuthState","canLogout"),t("login",null)}).catch(e=>{console.error(e)})},removeUser({commit:e}){e("setUser",{})},login({commit:e,dispatch:t,state:s},a){a||(a=s.user),S.auth.post("login",a).then(s=>{e("setAuthState","canLogin"),e("setUser",s.data),S.user=s.data,t("authenticate")}).catch(e=>{console.error(e)})},authenticate({commit:e,dispatch:t}){S.auth.get("authenticate").then(t=>{e("setAuthState","canA"),e("setUser",t.data)}).catch(e=>{console.error(e)})}}},G={state:{tests:{canCreateKeep:{success:!1,name:"Can Create Keep",routeInfo:{path:"/keeps",data:"Keep object {name, description, img, isPrivate}",response:"keep",description:"Post request. This should create a keep in your database. Your backend should attach a userId."}},canGetPublicKeeps:{success:!1,name:"Can Get Public Keeps",routeInfo:{path:"/keeps",response:"keeps[]",description:"Get request. This should get all public keeps."}},canGetUserKeeps:{success:!1,name:"Can Get keeps by User",routeInfo:{path:"/keeps/user",response:"keeps[]",description:"Get request. This should get all keeps by logged in user. The backend should validate the user Id"}},canGetKeepById:{success:!1,name:"Can Get Keep By keep Id",routeInfo:{path:"/keeps/:keepId",response:"keep",description:"Get request. This should get one keep by its id."}},canEditKeep:{success:!1,name:"Can Edit Keep",routeInfo:{path:"/keeps/:keepId",data:"keep {name, description, img, isprivate}",response:"keep",description:"Put request. This should update the old keep object with the new keep object."}},canDeleteKeep:{success:!1,name:"Can Delete Keep",routeInfo:{path:"keeps/:keepId",description:"Delete request. This should delete the object by its id."}}},keeps:[],keep:{}},mutations:{setKeepState(e,t){e.tests[t].success=!0},setKeeps(e,t){e.keeps=t},setKeep(e,t){e.keep=t}},actions:{createKeep({commit:e,dispatch:t,state:s},a){S.api.post("/keeps",a).then(s=>{console.log(s.data),e("setKeepState","canCreateKeep"),t("testKeeps")}).catch(e=>{console.error(e)})},testKeeps({commit:e,dispatch:t,state:s}){S.api.get("keeps/user").then(s=>{e("setKeeps",s.data),e("setKeep",s.data[0]),e("setKeepState","canGetUserKeeps"),t("getKeepById")}),S.api.get("/keeps").then(t=>{console.log(t.data),e("setKeepState","canGetPublicKeeps")})},getKeepById({commit:e,dispatch:t,state:s}){S.api.get("keeps/"+s.keep.id).then(s=>{e("setKeepState","canGetKeepById"),t("updateKeep",s.data)}).catch(e=>console.error(e))},updateKeep({commit:e,dispatch:t},s){S.api.put("keeps/"+s.id,s).then(s=>{e("setKeepState","canEditKeep"),t("deleteKeep")}).catch(e=>{console.error(e)})},deleteKeep({commit:e,dispatch:t,state:s}){S.api.delete("keeps/"+s.keep.id).then(t=>{console.log("deleted keep"),e("setKeepState","canDeleteKeep")}).catch(e=>{console.error(e)})}}},A={state:{tests:{canCV:{success:!1,name:"Can Create Vault",routeInfo:{path:"/vaults",data:"Vault Object {name, description}",response:"Vault",description:"Post request. This will create a vault. You should add userId from backend."}},canGUV:{success:!1,name:"Can Get User Vaults",routeInfo:{path:"/vaults",response:"vaults[]",description:"Get Request. This will get all the vaults for the logged in user."}},canGV:{success:!1,name:"Can Get Vault By Id",routeInfo:{path:"/vaults/:vaultId",response:"vault",description:"Get request. This will get the individual vault (it should also check that you own the vault)"}},canDV:{success:!1,name:"Can Delete Vault",routeInfo:{path:"/vaults/:vaultId",description:"This will delete a vault (it should also check that you own the vault.)"}}},vaults:[],vault:{}},mutations:{setState(e,t){e.tests[t].success=!0},setVaults(e,t){e.vaults=t},setVault(e,t){e.vault=t}},actions:{createVault({commit:e,dispatch:t},s){S.api.post("vaults",s).then(s=>{console.log(s.data),e("setState","canCV"),t("getVaults")}).catch(e=>{console.error(e)})},getVaults({commit:e,dispatch:t}){S.api.get("vaults").then(s=>{e("setVaults",s.data),e("setState","canGUV"),e("setVault",s.data[0]),t("getVaultById")}).catch(e=>{console.error(e)})},getVaultById({commit:e,dispatch:t,state:s}){S.api.get("vaults/"+s.vault.id).then(s=>{e("setState","canGV"),t("deleteVault",s.data.id)}).catch(e=>{console.error(e)})},deleteVault({commit:e,dispatch:t},s){S.api.delete("vaults/"+s).then(t=>{e("setState","canDV")}).catch(e=>{console.error(e)})}}},R={state:{tests:{canCreateVK:{name:"Can Create Vault Keep",success:!1,routeInfo:{path:"/vaultkeeps",data:"vaultkeep {vaultId, keepId}",description:"This will map a vaultkeep relationship. It needs a vaultId, a keepId, and a userId. You should add your userId from the backend."}},canGetVK:{name:"Can Get Vault Keeps",success:!1,routeInfo:{path:"/vaultkeeps/:vaultId",response:"keeps[]",description:"Get request. This will get all the keeps that match the vaultId on the vaultkeep relationship table."}},canDeleteVK:{name:"Can Delete Vault Keep",success:!1,routeInfo:{path:"/vaultkeeps",data:"vaultkeep",description:"Put request. This will delete a vaultkeep relationship. It needs a vaultId, a keepId, and a userId."}}},vaultKeep:{},user:{},keep:{},vault:{}},mutations:{setVKState(e,t){e.tests[t].success=!0},setVaultKeep(e,t){e.vaultKeep=t},setUser(e,t){e.user=t},setVaultForVK(e,t){e.vault=t},setKeepForVK(e,t){e.keep=t}},actions:{getKeep({commit:e,dispatch:t}){S.api.get("keeps").then(s=>{e("setKeepForVK",s.data[0]),t("getVault")})},getVault({commit:e,dispatch:t}){S.api.get("vaults").then(s=>{e("setVaultForVK",s.data[0]),t("createVaultKeep")})},createVaultKeep({commit:e,dispatch:t,state:s}){let a={vaultId:s.vault.id,keepId:s.keep.id};S.api.post("vaultkeeps",a).then(s=>{e("setVKState","canCreateVK"),e("setVaultKeep",a),t("getVaultKeeps")}).catch(e=>console.error(e))},getVaultKeeps({commit:e,dispatch:t,state:s}){S.api.get("vaultkeeps/"+s.vaultKeep.vaultId).then(s=>{e("setVKState","canGetVK"),t("deleteVaultKeep")}).catch(e=>console.error(e))},deleteVaultKeep({commit:e,state:t}){S.api.put("vaultkeeps/",t.vaultKeep).then(t=>{e("setVKState","canDeleteVK")}).catch(e=>console.error(e))}}};a["a"].use(_["a"]);var $=new _["a"].Store({state:{user:{}},modules:{auth:P,keeps:G,vaults:A,vaultKeeps:R},mutations:{setUser(e,t){e.user=t}},actions:{},getters:{User(e){return e.user}}});a["a"].config.productionTip=!1,new a["a"]({router:y,store:$,render:function(e){return e(c)}}).$mount("#app")},"64a9":function(e,t,s){},"7c85":function(e,t,s){},"867d":function(e,t,s){"use strict";var a=s("7c85"),o=s.n(a);o.a},cccb:function(e,t,s){"use strict";var a=s("d563"),o=s.n(a);o.a},d563:function(e,t,s){}});
//# sourceMappingURL=app.826a3541.js.map